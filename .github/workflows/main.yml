name: Validate and push docker image
on:
  pull_request:
    branches: [ main ]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
      - run: mvn test -Pcoverage

  code-analyze:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Pcoverage -Dsonar.projectKey=Diegobbrito_contcode-hackaton -Dsonar.coverage.jacoco.xmlReportPaths=target/jacoco-reports/jacoco.xml -Dsonar.exclusions=**/config/**,**/*Application.java

  push-docker-image:
    runs-on: ubuntu-latest
    needs: code-analyze
    steps:
      - name: Obtain source code
        uses: actions/checkout@v4
      - name: Authenticate on Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/contcode-hackaton:latest
            ${{ secrets.DOCKER_USERNAME }}/contcode-hackaton:v${{ github.run_number }}

deploy-ocp:
  runs-on: ubuntu-latest
  needs: push-docker-image
  steps:
    - uses: actions/checkout@v3
    - name: Login to OpenShift
      env:
        KUBECONFIG: ${{ secrets.KUBECONFIG }}
      run: |
        oc login --token=${{ secrets.OCP_TOKEN }} --server=${{ secrets.OCP_SERVER }}

    # List files (debugging step, can be removed)
    - name: List files in directory
      run: ls -R

    # Apply Kubernetes manifest for the deployment
    - name: Deploy to OpenShift
      env:
        KUBECONFIG: ${{ secrets.KUBECONFIG }}
      run: |
        # Set the image to the latest built version (based on the Docker tags)
        oc set image deployment/stoke stoke=${{ secrets.DOCKER_USERNAME }}/contcode-hackaton:v${{ github.run_number }}
        
        # Optionally, you can wait for the rollout to complete
        oc rollout status deployment/stoke

        # If you're using a Kubernetes `deployment.yaml` file, you can apply the changes like so:
        # oc apply -f ./kubernetes/app/deployment.yaml
        
        # You can also trigger the deployment manually if required
        # oc rollout restart deployment/stoke
