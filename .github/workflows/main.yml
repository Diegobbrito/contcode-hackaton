name: Validate and push Docker image

on:
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Run Tests with Coverage
        run: mvn test -Pcoverage

  code-analyze:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: SonarCloud Scan
        uses: sonarsource/sonarqube-scan-action@v4.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=Diegobbrito_contcode-hackaton \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.exclusions=**/config/**,**/*Application.java
          projectBaseDir: ./src
          scanMetadataReportFile: ./src/.scannerwork/report-task.txt

#      - name: Build and analyze with SonarCloud
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        run: |
#          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
#          -Dsonar.projectKey=Diegobbrito_contcode-hackaton \
#          -Dsonar.organization=diegobbrito \
#          -Dsonar.host.url=https://sonarcloud.io \
#          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
#          -Dsonar.exclusions=**/config/**,**/*Application.java \
#          -Dsonar.projectBaseDir=.
#
#      - name: Wait for SonarCloud Processing
#        run: sleep 30
#
#      - name: Debug SonarQube Scanner output
#        run: |
#          echo "Listing .scannerwork directory contents:"
#          ls -R .scannerwork/ || echo "No .scannerwork directory found"

      - name: SonarCloud Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600
          scanMetadataReportFile: ./src/.scannerwork/report-task.txt
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Show SonarCloud Quality Gate Status
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"

  push-docker-image:
    runs-on: ubuntu-latest
    needs: code-analyze
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Authenticate with Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/contcode-hackaton:latest
            ${{ secrets.DOCKER_USERNAME }}/contcode-hackaton:v${{ github.run_number }}

  deploy-ocp:
    runs-on: ubuntu-latest
    needs: push-docker-image
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to OpenShift
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
        run: |
          oc login --token=${{ secrets.OCP_TOKEN }} --server=${{ secrets.OCP_SERVER }}

      - name: List files in directory (for debugging)
        run: ls -R

      - name: Update Kubernetes Deployment with New Image
        run: |
          IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/contcode-hackaton:v${{ github.run_number }}
          echo "Updating deployment.yaml with image: $IMAGE_NAME"
          sed -i "s|image:.*|image: $IMAGE_NAME|g" ./k8s/app/deployment.yaml
          cat ./k8s/app/deployment.yaml

      - name: Deploy to OpenShift
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
        run: |
          oc apply -f ./k8s/app/deployment.yaml
